import dotenv from 'dotenv';
import { expect } from 'chai';
import {
  BalancerSdkConfig,
  BalancerSdkSorConfig,
  Network,
  BalancerSDK,
} from '@/.';
import { Pools } from '../pools.module';
import { MockPoolDataService } from '@/test/lib/mockPool';

import pools_14717479 from '@/test/lib/pools_14717479.json';

let sdkConfig: BalancerSdkConfig;

dotenv.config();

const weth_usdc_pool_id =
  '0x96646936b91d6b9d7d0c47c496afbf3d6ec7b6f8000200000000000000000019';
const weth_bal_pool_id =
  '0x5c6ee304399dbdb9c8ef030ab642b10820db8f56000200000000000000000014';

describe('pools exit module', () => {
  before(() => {
    // Mainnet pool snapshot taken at block 14717479
    const mockPoolDataService = new MockPoolDataService(
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      pools_14717479 as any
    );

    const sorConfig: BalancerSdkSorConfig = {
      tokenPriceService: 'coingecko',
      poolDataService: mockPoolDataService,
      fetchOnChainBalances: false,
    };

    sdkConfig = {
      network: Network.MAINNET,
      rpcUrl: ``,
      sor: sorConfig,
    };
  });

  context('instantiation', () => {
    it('instantiate via SDK', async () => {
      const balancer = new BalancerSDK(sdkConfig);
      await balancer.pools.fetchPools();
      const pools = balancer.pools.getPools();
      expect(pools).to.deep.eq(pools_14717479);
    });
    it('instantiate via module', async () => {
      const poolsModule = new Pools(sdkConfig);
      await poolsModule.fetchPools();
      const pools = poolsModule.getPools();
      expect(pools).to.deep.eq(pools_14717479);
    });
  });

  describe('buildExitExactBPTInForTokensOut', () => {
    it('should return encoded params - with slippage', async () => {
      const pools = new Pools(sdkConfig);
      const { data } = await pools.exit.buildExitExactBPTInForTokensOut(
        '0x35f5a330FD2F8e521ebd259FA272bA8069590741',
        weth_usdc_pool_id,
        '100',
        '0.01'
      );

      expect(data).to.equal(
        '0x8bdb391396646936b91d6b9d7d0c47c496afbf3d6ec7b6f800020000000000000000001900000000000000000000000035f5a330fd2f8e521ebd259fa272ba806959074100000000000000000000000035f5a330fd2f8e521ebd259fa272ba80695907410000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000b05147f10000000000000000000000000000000000000000000000000e0b089f2c4ec13d000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000056bc75e2d63100000'
      );
    });
    it('should return encoded params - without slippage', async () => {
      const pools = new Pools(sdkConfig);
      const { data } = await pools.exit.buildExitExactBPTInForTokensOut(
        '0x35f5a330FD2F8e521ebd259FA272bA8069590741',
        weth_bal_pool_id,
        '100',
        '0'
      );

      expect(data).to.equal(
        '0x8bdb39135c6ee304399dbdb9c8ef030ab642b10820db8f5600020000000000000000001400000000000000000000000035f5a330fd2f8e521ebd259fa272ba806959074100000000000000000000000035f5a330fd2f8e521ebd259fa272ba80695907410000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000e0000000000000000000000000000000000000000000000000000000000000014000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000ba100000625a3754423978a60c9317c58a424e3d000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000a723db202b2d78def000000000000000000000000000000000000000000000000034c042154b9c77c000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000056bc75e2d63100000'
      );
    });
  });
});
